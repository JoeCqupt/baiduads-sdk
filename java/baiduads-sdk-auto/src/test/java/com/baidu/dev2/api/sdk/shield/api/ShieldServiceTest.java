/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.baidu.dev2.api.sdk.shield.api;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.shield.model.AddAccountExcludeIpRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.AddAccountExcludeIpResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.AddBShieldPolicyRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.AddBShieldPolicyResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.DelAccountExcludeIpRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.DelAccountExcludeIpResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.DeleteBShieldBlackIPRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.DeleteBShieldBlackIPResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.DeleteBShieldCustomerRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.DeleteBShieldCustomerResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.DeleteBShieldPolicyRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.DeleteBShieldPolicyResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdateBShieldBlackIPRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdateBShieldBlackIPResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdateBShieldCustomerRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdateBShieldCustomerResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdatePolicyIPToBlackIPRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdatePolicyIPToBlackIPResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdateShieldPolicyRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdateShieldPolicyResponseWrapper;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShieldService
 */
@Ignore
public class ShieldServiceTest {

    private final ShieldService api = new ShieldService();

    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAccountExcludeIpTest() throws ApiException {
        AddAccountExcludeIpRequestWrapper addAccountExcludeIpRequestWrapper = null;
        AddAccountExcludeIpResponseWrapper response = api.addAccountExcludeIp(addAccountExcludeIpRequestWrapper);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addBShieldPolicyTest() throws ApiException {
        AddBShieldPolicyRequestWrapper addBShieldPolicyRequestWrapper = null;
        AddBShieldPolicyResponseWrapper response = api.addBShieldPolicy(addBShieldPolicyRequestWrapper);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void delAccountExcludeIpTest() throws ApiException {
        DelAccountExcludeIpRequestWrapper delAccountExcludeIpRequestWrapper = null;
        DelAccountExcludeIpResponseWrapper response = api.delAccountExcludeIp(delAccountExcludeIpRequestWrapper);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBShieldBlackIPTest() throws ApiException {
        DeleteBShieldBlackIPRequestWrapper deleteBShieldBlackIPRequestWrapper = null;
        DeleteBShieldBlackIPResponseWrapper response = api.deleteBShieldBlackIP(deleteBShieldBlackIPRequestWrapper);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBShieldCustomerTest() throws ApiException {
        DeleteBShieldCustomerRequestWrapper deleteBShieldCustomerRequestWrapper = null;
        DeleteBShieldCustomerResponseWrapper response = api.deleteBShieldCustomer(deleteBShieldCustomerRequestWrapper);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteBShieldPolicyTest() throws ApiException {
        DeleteBShieldPolicyRequestWrapper deleteBShieldPolicyRequestWrapper = null;
        DeleteBShieldPolicyResponseWrapper response = api.deleteBShieldPolicy(deleteBShieldPolicyRequestWrapper);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBShieldBlackIPTest() throws ApiException {
        UpdateBShieldBlackIPRequestWrapper updateBShieldBlackIPRequestWrapper = null;
        UpdateBShieldBlackIPResponseWrapper response = api.updateBShieldBlackIP(updateBShieldBlackIPRequestWrapper);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateBShieldCustomerTest() throws ApiException {
        UpdateBShieldCustomerRequestWrapper updateBShieldCustomerRequestWrapper = null;
        UpdateBShieldCustomerResponseWrapper response = api.updateBShieldCustomer(updateBShieldCustomerRequestWrapper);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePolicyIPToBlackIPTest() throws ApiException {
        UpdatePolicyIPToBlackIPRequestWrapper updatePolicyIPToBlackIPRequestWrapper = null;
        UpdatePolicyIPToBlackIPResponseWrapper response = api.updatePolicyIPToBlackIP(updatePolicyIPToBlackIPRequestWrapper);

        // TODO: test validations
    }
    /**
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateShieldPolicyTest() throws ApiException {
        UpdateShieldPolicyRequestWrapper updateShieldPolicyRequestWrapper = null;
        UpdateShieldPolicyResponseWrapper response = api.updateShieldPolicy(updateShieldPolicyRequestWrapper);

        // TODO: test validations
    }
}
