/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.dpaapiproductset.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.dpaapiproductset.model.AddProductSetRequestWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.AddProductSetResponseWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.DeleteProductSetRequestWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.DeleteProductSetResponseWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.GetCatalogFieldsInfoRequestWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.GetCatalogFieldsInfoResponseWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.GetCatalogMaterialFieldsInfoRequestWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.GetCatalogMaterialFieldsInfoResponseWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.GetProductSetByCatalogRequestWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.GetProductSetByCatalogResponseWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.GetProductSetRequestWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.GetProductSetResponseWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.UpdateProductSetRequestWrapper;
import com.baidu.dev2.api.sdk.dpaapiproductset.model.UpdateProductSetResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DpaApiProductSetService {
  private ApiClient apiClient;

  public DpaApiProductSetService() {
    this(Configuration.getDefaultApiClient());
  }

  public DpaApiProductSetService(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param addProductSetRequestWrapper  (required)
   * @return AddProductSetResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public AddProductSetResponseWrapper addProductSet(AddProductSetRequestWrapper addProductSetRequestWrapper) throws ApiException {
    Object localVarPostBody = addProductSetRequestWrapper;
    
    // verify the required parameter 'addProductSetRequestWrapper' is set
    if (addProductSetRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'addProductSetRequestWrapper' when calling addProductSet");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/DpaApiProductSetService/addProductSet";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AddProductSetResponseWrapper> localVarReturnType = new TypeReference<AddProductSetResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param deleteProductSetRequestWrapper  (required)
   * @return DeleteProductSetResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DeleteProductSetResponseWrapper deleteProductSet(DeleteProductSetRequestWrapper deleteProductSetRequestWrapper) throws ApiException {
    Object localVarPostBody = deleteProductSetRequestWrapper;
    
    // verify the required parameter 'deleteProductSetRequestWrapper' is set
    if (deleteProductSetRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteProductSetRequestWrapper' when calling deleteProductSet");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/DpaApiProductSetService/deleteProductSet";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeleteProductSetResponseWrapper> localVarReturnType = new TypeReference<DeleteProductSetResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getCatalogFieldsInfoRequestWrapper  (required)
   * @return GetCatalogFieldsInfoResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetCatalogFieldsInfoResponseWrapper getCatalogFieldsInfo(GetCatalogFieldsInfoRequestWrapper getCatalogFieldsInfoRequestWrapper) throws ApiException {
    Object localVarPostBody = getCatalogFieldsInfoRequestWrapper;
    
    // verify the required parameter 'getCatalogFieldsInfoRequestWrapper' is set
    if (getCatalogFieldsInfoRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getCatalogFieldsInfoRequestWrapper' when calling getCatalogFieldsInfo");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/DpaApiProductSetService/getCatalogFieldsInfo";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetCatalogFieldsInfoResponseWrapper> localVarReturnType = new TypeReference<GetCatalogFieldsInfoResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getCatalogMaterialFieldsInfoRequestWrapper  (required)
   * @return GetCatalogMaterialFieldsInfoResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetCatalogMaterialFieldsInfoResponseWrapper getCatalogMaterialFieldsInfo(GetCatalogMaterialFieldsInfoRequestWrapper getCatalogMaterialFieldsInfoRequestWrapper) throws ApiException {
    Object localVarPostBody = getCatalogMaterialFieldsInfoRequestWrapper;
    
    // verify the required parameter 'getCatalogMaterialFieldsInfoRequestWrapper' is set
    if (getCatalogMaterialFieldsInfoRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getCatalogMaterialFieldsInfoRequestWrapper' when calling getCatalogMaterialFieldsInfo");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/DpaApiProductSetService/getCatalogMaterialFieldsInfo";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetCatalogMaterialFieldsInfoResponseWrapper> localVarReturnType = new TypeReference<GetCatalogMaterialFieldsInfoResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getProductSetRequestWrapper  (required)
   * @return GetProductSetResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetProductSetResponseWrapper getProductSet(GetProductSetRequestWrapper getProductSetRequestWrapper) throws ApiException {
    Object localVarPostBody = getProductSetRequestWrapper;
    
    // verify the required parameter 'getProductSetRequestWrapper' is set
    if (getProductSetRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getProductSetRequestWrapper' when calling getProductSet");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/DpaApiProductSetService/getProductSet";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetProductSetResponseWrapper> localVarReturnType = new TypeReference<GetProductSetResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getProductSetByCatalogRequestWrapper  (required)
   * @return GetProductSetByCatalogResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetProductSetByCatalogResponseWrapper getProductSetByCatalog(GetProductSetByCatalogRequestWrapper getProductSetByCatalogRequestWrapper) throws ApiException {
    Object localVarPostBody = getProductSetByCatalogRequestWrapper;
    
    // verify the required parameter 'getProductSetByCatalogRequestWrapper' is set
    if (getProductSetByCatalogRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getProductSetByCatalogRequestWrapper' when calling getProductSetByCatalog");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/DpaApiProductSetService/getProductSetByCatalog";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetProductSetByCatalogResponseWrapper> localVarReturnType = new TypeReference<GetProductSetByCatalogResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateProductSetRequestWrapper  (required)
   * @return UpdateProductSetResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateProductSetResponseWrapper updateProductSet(UpdateProductSetRequestWrapper updateProductSetRequestWrapper) throws ApiException {
    Object localVarPostBody = updateProductSetRequestWrapper;
    
    // verify the required parameter 'updateProductSetRequestWrapper' is set
    if (updateProductSetRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateProductSetRequestWrapper' when calling updateProductSet");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/DpaApiProductSetService/updateProductSet";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateProductSetResponseWrapper> localVarReturnType = new TypeReference<UpdateProductSetResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
