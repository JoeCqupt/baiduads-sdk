/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.wtpfeed.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.wtpfeed.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.wtpfeed.model.AddWtpFeedRequestWrapper;
import com.baidu.dev2.api.sdk.wtpfeed.model.AddWtpFeedResponseWrapper;
import com.baidu.dev2.api.sdk.wtpfeed.model.DeleteWtpFeedRequestWrapper;
import com.baidu.dev2.api.sdk.wtpfeed.model.DeleteWtpFeedResponseWrapper;
import com.baidu.dev2.api.sdk.wtpfeed.model.GetWtpFeedRequestWrapper;
import com.baidu.dev2.api.sdk.wtpfeed.model.GetWtpFeedResponseWrapper;
import com.baidu.dev2.api.sdk.wtpfeed.model.UpdateWtpFeedRequestWrapper;
import com.baidu.dev2.api.sdk.wtpfeed.model.UpdateWtpFeedResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class WtpFeedService {
  private ApiClient apiClient;

  public WtpFeedService() {
    this(Configuration.getDefaultApiClient());
  }

  public WtpFeedService(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param addWtpFeedRequestWrapper  (required)
   * @return AddWtpFeedResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public AddWtpFeedResponseWrapper addWtpFeed(AddWtpFeedRequestWrapper addWtpFeedRequestWrapper) throws ApiException {
    Object localVarPostBody = addWtpFeedRequestWrapper;
    
    // verify the required parameter 'addWtpFeedRequestWrapper' is set
    if (addWtpFeedRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'addWtpFeedRequestWrapper' when calling addWtpFeed");
    }
    
    // create path and map variables
    String localVarPath = "/json/feed/v1/WtpFeedService/addWtpFeed";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AddWtpFeedResponseWrapper> localVarReturnType = new TypeReference<AddWtpFeedResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param deleteWtpFeedRequestWrapper  (required)
   * @return DeleteWtpFeedResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DeleteWtpFeedResponseWrapper deleteWtpFeed(DeleteWtpFeedRequestWrapper deleteWtpFeedRequestWrapper) throws ApiException {
    Object localVarPostBody = deleteWtpFeedRequestWrapper;
    
    // verify the required parameter 'deleteWtpFeedRequestWrapper' is set
    if (deleteWtpFeedRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteWtpFeedRequestWrapper' when calling deleteWtpFeed");
    }
    
    // create path and map variables
    String localVarPath = "/json/feed/v1/WtpFeedService/deleteWtpFeed";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeleteWtpFeedResponseWrapper> localVarReturnType = new TypeReference<DeleteWtpFeedResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getWtpFeedRequestWrapper  (required)
   * @return GetWtpFeedResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetWtpFeedResponseWrapper getWtpFeed(GetWtpFeedRequestWrapper getWtpFeedRequestWrapper) throws ApiException {
    Object localVarPostBody = getWtpFeedRequestWrapper;
    
    // verify the required parameter 'getWtpFeedRequestWrapper' is set
    if (getWtpFeedRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getWtpFeedRequestWrapper' when calling getWtpFeed");
    }
    
    // create path and map variables
    String localVarPath = "/json/feed/v1/WtpFeedService/getWtpFeed";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetWtpFeedResponseWrapper> localVarReturnType = new TypeReference<GetWtpFeedResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateWtpFeedRequestWrapper  (required)
   * @return UpdateWtpFeedResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateWtpFeedResponseWrapper updateWtpFeed(UpdateWtpFeedRequestWrapper updateWtpFeedRequestWrapper) throws ApiException {
    Object localVarPostBody = updateWtpFeedRequestWrapper;
    
    // verify the required parameter 'updateWtpFeedRequestWrapper' is set
    if (updateWtpFeedRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateWtpFeedRequestWrapper' when calling updateWtpFeed");
    }
    
    // create path and map variables
    String localVarPath = "/json/feed/v1/WtpFeedService/updateWtpFeed";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateWtpFeedResponseWrapper> localVarReturnType = new TypeReference<UpdateWtpFeedResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
