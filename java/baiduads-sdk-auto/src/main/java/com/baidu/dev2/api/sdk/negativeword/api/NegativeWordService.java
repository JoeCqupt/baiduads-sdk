/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.negativeword.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.negativeword.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.negativeword.model.GetDuplicateNegativeWordsRequestWrapper;
import com.baidu.dev2.api.sdk.negativeword.model.GetDuplicateNegativeWordsResponseWrapper;
import com.baidu.dev2.api.sdk.negativeword.model.UpdateAdgroupNegativeWordsRequestWrapper;
import com.baidu.dev2.api.sdk.negativeword.model.UpdateAdgroupNegativeWordsResponseWrapper;
import com.baidu.dev2.api.sdk.negativeword.model.UpdateAdgroupNegativeWordsSyncRequestWrapper;
import com.baidu.dev2.api.sdk.negativeword.model.UpdateAdgroupNegativeWordsSyncResponseWrapper;
import com.baidu.dev2.api.sdk.negativeword.model.UpdateCampaignNegativeWordsSyncRequestWrapper;
import com.baidu.dev2.api.sdk.negativeword.model.UpdateCampaignNegativeWordsSyncResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NegativeWordService {
  private ApiClient apiClient;

  public NegativeWordService() {
    this(Configuration.getDefaultApiClient());
  }

  public NegativeWordService(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param getDuplicateNegativeWordsRequestWrapper  (required)
   * @return GetDuplicateNegativeWordsResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetDuplicateNegativeWordsResponseWrapper getDuplicateNegativeWords(GetDuplicateNegativeWordsRequestWrapper getDuplicateNegativeWordsRequestWrapper) throws ApiException {
    Object localVarPostBody = getDuplicateNegativeWordsRequestWrapper;
    
    // verify the required parameter 'getDuplicateNegativeWordsRequestWrapper' is set
    if (getDuplicateNegativeWordsRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getDuplicateNegativeWordsRequestWrapper' when calling getDuplicateNegativeWords");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/NegativeWordService/getDuplicateNegativeWords";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetDuplicateNegativeWordsResponseWrapper> localVarReturnType = new TypeReference<GetDuplicateNegativeWordsResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateAdgroupNegativeWordsRequestWrapper  (required)
   * @return UpdateAdgroupNegativeWordsResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateAdgroupNegativeWordsResponseWrapper updateAdgroupNegativeWords(UpdateAdgroupNegativeWordsRequestWrapper updateAdgroupNegativeWordsRequestWrapper) throws ApiException {
    Object localVarPostBody = updateAdgroupNegativeWordsRequestWrapper;
    
    // verify the required parameter 'updateAdgroupNegativeWordsRequestWrapper' is set
    if (updateAdgroupNegativeWordsRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateAdgroupNegativeWordsRequestWrapper' when calling updateAdgroupNegativeWords");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/NegativeWordService/updateAdgroupNegativeWords";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateAdgroupNegativeWordsResponseWrapper> localVarReturnType = new TypeReference<UpdateAdgroupNegativeWordsResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateAdgroupNegativeWordsSyncRequestWrapper  (required)
   * @return UpdateAdgroupNegativeWordsSyncResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateAdgroupNegativeWordsSyncResponseWrapper updateAdgroupNegativeWordsSync(UpdateAdgroupNegativeWordsSyncRequestWrapper updateAdgroupNegativeWordsSyncRequestWrapper) throws ApiException {
    Object localVarPostBody = updateAdgroupNegativeWordsSyncRequestWrapper;
    
    // verify the required parameter 'updateAdgroupNegativeWordsSyncRequestWrapper' is set
    if (updateAdgroupNegativeWordsSyncRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateAdgroupNegativeWordsSyncRequestWrapper' when calling updateAdgroupNegativeWordsSync");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/NegativeWordService/updateAdgroupNegativeWordsSync";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateAdgroupNegativeWordsSyncResponseWrapper> localVarReturnType = new TypeReference<UpdateAdgroupNegativeWordsSyncResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateCampaignNegativeWordsSyncRequestWrapper  (required)
   * @return UpdateCampaignNegativeWordsSyncResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateCampaignNegativeWordsSyncResponseWrapper updateCampaignNegativeWordsSync(UpdateCampaignNegativeWordsSyncRequestWrapper updateCampaignNegativeWordsSyncRequestWrapper) throws ApiException {
    Object localVarPostBody = updateCampaignNegativeWordsSyncRequestWrapper;
    
    // verify the required parameter 'updateCampaignNegativeWordsSyncRequestWrapper' is set
    if (updateCampaignNegativeWordsSyncRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateCampaignNegativeWordsSyncRequestWrapper' when calling updateCampaignNegativeWordsSync");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/NegativeWordService/updateCampaignNegativeWordsSync";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateCampaignNegativeWordsSyncResponseWrapper> localVarReturnType = new TypeReference<UpdateCampaignNegativeWordsSyncResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
