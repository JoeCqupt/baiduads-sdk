/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.sharerepertory.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.sharerepertory.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.sharerepertory.model.AddShareRepertoryRequestWrapper;
import com.baidu.dev2.api.sdk.sharerepertory.model.AddShareRepertoryResponseWrapper;
import com.baidu.dev2.api.sdk.sharerepertory.model.DeleteShareRepertoryRequestWrapper;
import com.baidu.dev2.api.sdk.sharerepertory.model.DeleteShareRepertoryResponseWrapper;
import com.baidu.dev2.api.sdk.sharerepertory.model.GetShareRepertoryRequestWrapper;
import com.baidu.dev2.api.sdk.sharerepertory.model.GetShareRepertoryResponseWrapper;
import com.baidu.dev2.api.sdk.sharerepertory.model.UpdateShareRepertoryRequestWrapper;
import com.baidu.dev2.api.sdk.sharerepertory.model.UpdateShareRepertoryResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ShareRepertoryService {
  private ApiClient apiClient;

  public ShareRepertoryService() {
    this(Configuration.getDefaultApiClient());
  }

  public ShareRepertoryService(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param addShareRepertoryRequestWrapper  (required)
   * @return AddShareRepertoryResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public AddShareRepertoryResponseWrapper addShareRepertory(AddShareRepertoryRequestWrapper addShareRepertoryRequestWrapper) throws ApiException {
    Object localVarPostBody = addShareRepertoryRequestWrapper;
    
    // verify the required parameter 'addShareRepertoryRequestWrapper' is set
    if (addShareRepertoryRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'addShareRepertoryRequestWrapper' when calling addShareRepertory");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShareRepertoryService/addShareRepertory";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AddShareRepertoryResponseWrapper> localVarReturnType = new TypeReference<AddShareRepertoryResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param deleteShareRepertoryRequestWrapper  (required)
   * @return DeleteShareRepertoryResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DeleteShareRepertoryResponseWrapper deleteShareRepertory(DeleteShareRepertoryRequestWrapper deleteShareRepertoryRequestWrapper) throws ApiException {
    Object localVarPostBody = deleteShareRepertoryRequestWrapper;
    
    // verify the required parameter 'deleteShareRepertoryRequestWrapper' is set
    if (deleteShareRepertoryRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteShareRepertoryRequestWrapper' when calling deleteShareRepertory");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShareRepertoryService/deleteShareRepertory";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeleteShareRepertoryResponseWrapper> localVarReturnType = new TypeReference<DeleteShareRepertoryResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getShareRepertoryRequestWrapper  (required)
   * @return GetShareRepertoryResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetShareRepertoryResponseWrapper getShareRepertory(GetShareRepertoryRequestWrapper getShareRepertoryRequestWrapper) throws ApiException {
    Object localVarPostBody = getShareRepertoryRequestWrapper;
    
    // verify the required parameter 'getShareRepertoryRequestWrapper' is set
    if (getShareRepertoryRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getShareRepertoryRequestWrapper' when calling getShareRepertory");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShareRepertoryService/getShareRepertory";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetShareRepertoryResponseWrapper> localVarReturnType = new TypeReference<GetShareRepertoryResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateShareRepertoryRequestWrapper  (required)
   * @return UpdateShareRepertoryResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateShareRepertoryResponseWrapper updateShareRepertory(UpdateShareRepertoryRequestWrapper updateShareRepertoryRequestWrapper) throws ApiException {
    Object localVarPostBody = updateShareRepertoryRequestWrapper;
    
    // verify the required parameter 'updateShareRepertoryRequestWrapper' is set
    if (updateShareRepertoryRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateShareRepertoryRequestWrapper' when calling updateShareRepertory");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShareRepertoryService/updateShareRepertory";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateShareRepertoryResponseWrapper> localVarReturnType = new TypeReference<UpdateShareRepertoryResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
