/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.shieldfunction.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.shieldfunction.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.shieldfunction.model.AddIPBlackManualRequestWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.AddIPBlackManualResponseWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.DeleteIPBlackManualRequestWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.DeleteIPBlackManualResponseWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetHitBlackIPPolicyRequestWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetHitBlackIPPolicyResponseWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetHitCustomerPolicyRequestWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetHitCustomerPolicyResponseWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetIPBlackManualRequestWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetIPBlackManualResponseWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetShieldBlackIPRequestWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetShieldBlackIPResponseWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetShieldCustomerRequestWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetShieldCustomerResponseWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetShieldPolicyRequestWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetShieldPolicyResponseWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetUserDiagnoseDetailRequestWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetUserDiagnoseDetailResponseWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetUserDiagnoseInfoRequestWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.GetUserDiagnoseInfoResponseWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.UpdateAdvIPBlackManualRequestWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.UpdateAdvIPBlackManualResponseWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.UpdateIPBlackManualRequestWrapper;
import com.baidu.dev2.api.sdk.shieldfunction.model.UpdateIPBlackManualResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ShieldFunction {
  private ApiClient apiClient;

  public ShieldFunction() {
    this(Configuration.getDefaultApiClient());
  }

  public ShieldFunction(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param addIPBlackManualRequestWrapper  (required)
   * @return AddIPBlackManualResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public AddIPBlackManualResponseWrapper addIPBlackManual(AddIPBlackManualRequestWrapper addIPBlackManualRequestWrapper) throws ApiException {
    Object localVarPostBody = addIPBlackManualRequestWrapper;
    
    // verify the required parameter 'addIPBlackManualRequestWrapper' is set
    if (addIPBlackManualRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'addIPBlackManualRequestWrapper' when calling addIPBlackManual");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldFunction/addIPBlackManual";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AddIPBlackManualResponseWrapper> localVarReturnType = new TypeReference<AddIPBlackManualResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param deleteIPBlackManualRequestWrapper  (required)
   * @return DeleteIPBlackManualResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DeleteIPBlackManualResponseWrapper deleteIPBlackManual(DeleteIPBlackManualRequestWrapper deleteIPBlackManualRequestWrapper) throws ApiException {
    Object localVarPostBody = deleteIPBlackManualRequestWrapper;
    
    // verify the required parameter 'deleteIPBlackManualRequestWrapper' is set
    if (deleteIPBlackManualRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteIPBlackManualRequestWrapper' when calling deleteIPBlackManual");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldFunction/deleteIPBlackManual";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeleteIPBlackManualResponseWrapper> localVarReturnType = new TypeReference<DeleteIPBlackManualResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getHitBlackIPPolicyRequestWrapper  (required)
   * @return GetHitBlackIPPolicyResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetHitBlackIPPolicyResponseWrapper getHitBlackIPPolicy(GetHitBlackIPPolicyRequestWrapper getHitBlackIPPolicyRequestWrapper) throws ApiException {
    Object localVarPostBody = getHitBlackIPPolicyRequestWrapper;
    
    // verify the required parameter 'getHitBlackIPPolicyRequestWrapper' is set
    if (getHitBlackIPPolicyRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getHitBlackIPPolicyRequestWrapper' when calling getHitBlackIPPolicy");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldFunction/getHitBlackIPPolicy";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetHitBlackIPPolicyResponseWrapper> localVarReturnType = new TypeReference<GetHitBlackIPPolicyResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getHitCustomerPolicyRequestWrapper  (required)
   * @return GetHitCustomerPolicyResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetHitCustomerPolicyResponseWrapper getHitCustomerPolicy(GetHitCustomerPolicyRequestWrapper getHitCustomerPolicyRequestWrapper) throws ApiException {
    Object localVarPostBody = getHitCustomerPolicyRequestWrapper;
    
    // verify the required parameter 'getHitCustomerPolicyRequestWrapper' is set
    if (getHitCustomerPolicyRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getHitCustomerPolicyRequestWrapper' when calling getHitCustomerPolicy");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldFunction/getHitCustomerPolicy";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetHitCustomerPolicyResponseWrapper> localVarReturnType = new TypeReference<GetHitCustomerPolicyResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getIPBlackManualRequestWrapper  (required)
   * @return GetIPBlackManualResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetIPBlackManualResponseWrapper getIPBlackManual(GetIPBlackManualRequestWrapper getIPBlackManualRequestWrapper) throws ApiException {
    Object localVarPostBody = getIPBlackManualRequestWrapper;
    
    // verify the required parameter 'getIPBlackManualRequestWrapper' is set
    if (getIPBlackManualRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getIPBlackManualRequestWrapper' when calling getIPBlackManual");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldFunction/getIPBlackManual";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetIPBlackManualResponseWrapper> localVarReturnType = new TypeReference<GetIPBlackManualResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getShieldBlackIPRequestWrapper  (required)
   * @return GetShieldBlackIPResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetShieldBlackIPResponseWrapper getShieldBlackIP(GetShieldBlackIPRequestWrapper getShieldBlackIPRequestWrapper) throws ApiException {
    Object localVarPostBody = getShieldBlackIPRequestWrapper;
    
    // verify the required parameter 'getShieldBlackIPRequestWrapper' is set
    if (getShieldBlackIPRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getShieldBlackIPRequestWrapper' when calling getShieldBlackIP");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldFunction/getShieldBlackIP";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetShieldBlackIPResponseWrapper> localVarReturnType = new TypeReference<GetShieldBlackIPResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getShieldCustomerRequestWrapper  (required)
   * @return GetShieldCustomerResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetShieldCustomerResponseWrapper getShieldCustomer(GetShieldCustomerRequestWrapper getShieldCustomerRequestWrapper) throws ApiException {
    Object localVarPostBody = getShieldCustomerRequestWrapper;
    
    // verify the required parameter 'getShieldCustomerRequestWrapper' is set
    if (getShieldCustomerRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getShieldCustomerRequestWrapper' when calling getShieldCustomer");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldFunction/getShieldCustomer";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetShieldCustomerResponseWrapper> localVarReturnType = new TypeReference<GetShieldCustomerResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getShieldPolicyRequestWrapper  (required)
   * @return GetShieldPolicyResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetShieldPolicyResponseWrapper getShieldPolicy(GetShieldPolicyRequestWrapper getShieldPolicyRequestWrapper) throws ApiException {
    Object localVarPostBody = getShieldPolicyRequestWrapper;
    
    // verify the required parameter 'getShieldPolicyRequestWrapper' is set
    if (getShieldPolicyRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getShieldPolicyRequestWrapper' when calling getShieldPolicy");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldFunction/getShieldPolicy";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetShieldPolicyResponseWrapper> localVarReturnType = new TypeReference<GetShieldPolicyResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getUserDiagnoseDetailRequestWrapper  (required)
   * @return GetUserDiagnoseDetailResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetUserDiagnoseDetailResponseWrapper getUserDiagnoseDetail(GetUserDiagnoseDetailRequestWrapper getUserDiagnoseDetailRequestWrapper) throws ApiException {
    Object localVarPostBody = getUserDiagnoseDetailRequestWrapper;
    
    // verify the required parameter 'getUserDiagnoseDetailRequestWrapper' is set
    if (getUserDiagnoseDetailRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getUserDiagnoseDetailRequestWrapper' when calling getUserDiagnoseDetail");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldFunction/getUserDiagnoseDetail";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetUserDiagnoseDetailResponseWrapper> localVarReturnType = new TypeReference<GetUserDiagnoseDetailResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getUserDiagnoseInfoRequestWrapper  (required)
   * @return GetUserDiagnoseInfoResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetUserDiagnoseInfoResponseWrapper getUserDiagnoseInfo(GetUserDiagnoseInfoRequestWrapper getUserDiagnoseInfoRequestWrapper) throws ApiException {
    Object localVarPostBody = getUserDiagnoseInfoRequestWrapper;
    
    // verify the required parameter 'getUserDiagnoseInfoRequestWrapper' is set
    if (getUserDiagnoseInfoRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getUserDiagnoseInfoRequestWrapper' when calling getUserDiagnoseInfo");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldFunction/getUserDiagnoseInfo";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetUserDiagnoseInfoResponseWrapper> localVarReturnType = new TypeReference<GetUserDiagnoseInfoResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateAdvIPBlackManualRequestWrapper  (required)
   * @return UpdateAdvIPBlackManualResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateAdvIPBlackManualResponseWrapper updateAdvIPBlackManual(UpdateAdvIPBlackManualRequestWrapper updateAdvIPBlackManualRequestWrapper) throws ApiException {
    Object localVarPostBody = updateAdvIPBlackManualRequestWrapper;
    
    // verify the required parameter 'updateAdvIPBlackManualRequestWrapper' is set
    if (updateAdvIPBlackManualRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateAdvIPBlackManualRequestWrapper' when calling updateAdvIPBlackManual");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldFunction/updateAdvIPBlackManual";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateAdvIPBlackManualResponseWrapper> localVarReturnType = new TypeReference<UpdateAdvIPBlackManualResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateIPBlackManualRequestWrapper  (required)
   * @return UpdateIPBlackManualResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateIPBlackManualResponseWrapper updateIPBlackManual(UpdateIPBlackManualRequestWrapper updateIPBlackManualRequestWrapper) throws ApiException {
    Object localVarPostBody = updateIPBlackManualRequestWrapper;
    
    // verify the required parameter 'updateIPBlackManualRequestWrapper' is set
    if (updateIPBlackManualRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateIPBlackManualRequestWrapper' when calling updateIPBlackManual");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldFunction/updateIPBlackManual";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateIPBlackManualResponseWrapper> localVarReturnType = new TypeReference<UpdateIPBlackManualResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
