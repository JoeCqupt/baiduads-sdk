/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.extaudience.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.extaudience.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.extaudience.model.CreateEmptyGroupRequestWrapper;
import com.baidu.dev2.api.sdk.extaudience.model.CreateEmptyGroupResponseWrapper;
import com.baidu.dev2.api.sdk.extaudience.model.GetAudienceListRequestWrapper;
import com.baidu.dev2.api.sdk.extaudience.model.GetAudienceListResponseWrapper;
import com.baidu.dev2.api.sdk.extaudience.model.UpdateAudienceDspRequestWrapper;
import com.baidu.dev2.api.sdk.extaudience.model.UpdateAudienceDspResponseWrapper;
import com.baidu.dev2.api.sdk.extaudience.model.UpdateIdUpload4PourRequestWrapper;
import com.baidu.dev2.api.sdk.extaudience.model.UpdateIdUpload4PourResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ExtAudienceService {
  private ApiClient apiClient;

  public ExtAudienceService() {
    this(Configuration.getDefaultApiClient());
  }

  public ExtAudienceService(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param createEmptyGroupRequestWrapper  (required)
   * @return CreateEmptyGroupResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public CreateEmptyGroupResponseWrapper createEmptyGroup(CreateEmptyGroupRequestWrapper createEmptyGroupRequestWrapper) throws ApiException {
    Object localVarPostBody = createEmptyGroupRequestWrapper;
    
    // verify the required parameter 'createEmptyGroupRequestWrapper' is set
    if (createEmptyGroupRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'createEmptyGroupRequestWrapper' when calling createEmptyGroup");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ExtAudienceService/createEmptyGroup";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<CreateEmptyGroupResponseWrapper> localVarReturnType = new TypeReference<CreateEmptyGroupResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getAudienceListRequestWrapper  (required)
   * @return GetAudienceListResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetAudienceListResponseWrapper getAudienceList(GetAudienceListRequestWrapper getAudienceListRequestWrapper) throws ApiException {
    Object localVarPostBody = getAudienceListRequestWrapper;
    
    // verify the required parameter 'getAudienceListRequestWrapper' is set
    if (getAudienceListRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getAudienceListRequestWrapper' when calling getAudienceList");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ExtAudienceService/getAudienceList";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetAudienceListResponseWrapper> localVarReturnType = new TypeReference<GetAudienceListResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateAudienceDspRequestWrapper  (required)
   * @return UpdateAudienceDspResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateAudienceDspResponseWrapper updateAudienceDsp(UpdateAudienceDspRequestWrapper updateAudienceDspRequestWrapper) throws ApiException {
    Object localVarPostBody = updateAudienceDspRequestWrapper;
    
    // verify the required parameter 'updateAudienceDspRequestWrapper' is set
    if (updateAudienceDspRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateAudienceDspRequestWrapper' when calling updateAudienceDsp");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ExtAudienceService/updateAudienceDsp";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateAudienceDspResponseWrapper> localVarReturnType = new TypeReference<UpdateAudienceDspResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateIdUpload4PourRequestWrapper  (required)
   * @return UpdateIdUpload4PourResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateIdUpload4PourResponseWrapper updateIdUpload4Pour(UpdateIdUpload4PourRequestWrapper updateIdUpload4PourRequestWrapper) throws ApiException {
    Object localVarPostBody = updateIdUpload4PourRequestWrapper;
    
    // verify the required parameter 'updateIdUpload4PourRequestWrapper' is set
    if (updateIdUpload4PourRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateIdUpload4PourRequestWrapper' when calling updateIdUpload4Pour");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ExtAudienceService/updateIdUpload4Pour";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateIdUpload4PourResponseWrapper> localVarReturnType = new TypeReference<UpdateIdUpload4PourResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
