/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.fctranstraceapi.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.fctranstraceapi.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.fctranstraceapi.model.AddFcTransTraceRequestWrapper;
import com.baidu.dev2.api.sdk.fctranstraceapi.model.AddFcTransTraceResponseWrapper;
import com.baidu.dev2.api.sdk.fctranstraceapi.model.DeleteFcTransTraceRequestWrapper;
import com.baidu.dev2.api.sdk.fctranstraceapi.model.DeleteFcTransTraceResponseWrapper;
import com.baidu.dev2.api.sdk.fctranstraceapi.model.GetFcTransTraceListRequestWrapper;
import com.baidu.dev2.api.sdk.fctranstraceapi.model.GetFcTransTraceListResponseWrapper;
import com.baidu.dev2.api.sdk.fctranstraceapi.model.UpdateFcTransTraceRequestWrapper;
import com.baidu.dev2.api.sdk.fctranstraceapi.model.UpdateFcTransTraceResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FcTransTraceApiService {
  private ApiClient apiClient;

  public FcTransTraceApiService() {
    this(Configuration.getDefaultApiClient());
  }

  public FcTransTraceApiService(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param addFcTransTraceRequestWrapper  (required)
   * @return AddFcTransTraceResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public AddFcTransTraceResponseWrapper addFcTransTrace(AddFcTransTraceRequestWrapper addFcTransTraceRequestWrapper) throws ApiException {
    Object localVarPostBody = addFcTransTraceRequestWrapper;
    
    // verify the required parameter 'addFcTransTraceRequestWrapper' is set
    if (addFcTransTraceRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'addFcTransTraceRequestWrapper' when calling addFcTransTrace");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/FcTransTraceApiService/addFcTransTrace";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AddFcTransTraceResponseWrapper> localVarReturnType = new TypeReference<AddFcTransTraceResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param deleteFcTransTraceRequestWrapper  (required)
   * @return DeleteFcTransTraceResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DeleteFcTransTraceResponseWrapper deleteFcTransTrace(DeleteFcTransTraceRequestWrapper deleteFcTransTraceRequestWrapper) throws ApiException {
    Object localVarPostBody = deleteFcTransTraceRequestWrapper;
    
    // verify the required parameter 'deleteFcTransTraceRequestWrapper' is set
    if (deleteFcTransTraceRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteFcTransTraceRequestWrapper' when calling deleteFcTransTrace");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/FcTransTraceApiService/deleteFcTransTrace";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeleteFcTransTraceResponseWrapper> localVarReturnType = new TypeReference<DeleteFcTransTraceResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getFcTransTraceListRequestWrapper  (required)
   * @return GetFcTransTraceListResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetFcTransTraceListResponseWrapper getFcTransTraceList(GetFcTransTraceListRequestWrapper getFcTransTraceListRequestWrapper) throws ApiException {
    Object localVarPostBody = getFcTransTraceListRequestWrapper;
    
    // verify the required parameter 'getFcTransTraceListRequestWrapper' is set
    if (getFcTransTraceListRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getFcTransTraceListRequestWrapper' when calling getFcTransTraceList");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/FcTransTraceApiService/getFcTransTraceList";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetFcTransTraceListResponseWrapper> localVarReturnType = new TypeReference<GetFcTransTraceListResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateFcTransTraceRequestWrapper  (required)
   * @return UpdateFcTransTraceResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateFcTransTraceResponseWrapper updateFcTransTrace(UpdateFcTransTraceRequestWrapper updateFcTransTraceRequestWrapper) throws ApiException {
    Object localVarPostBody = updateFcTransTraceRequestWrapper;
    
    // verify the required parameter 'updateFcTransTraceRequestWrapper' is set
    if (updateFcTransTraceRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateFcTransTraceRequestWrapper' when calling updateFcTransTrace");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/FcTransTraceApiService/updateFcTransTrace";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateFcTransTraceResponseWrapper> localVarReturnType = new TypeReference<UpdateFcTransTraceResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
