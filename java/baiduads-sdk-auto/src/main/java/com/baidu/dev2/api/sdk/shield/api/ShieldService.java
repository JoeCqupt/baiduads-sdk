/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.shield.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.shield.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.shield.model.AddAccountExcludeIpRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.AddAccountExcludeIpResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.AddBShieldPolicyRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.AddBShieldPolicyResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.DelAccountExcludeIpRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.DelAccountExcludeIpResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.DeleteBShieldBlackIPRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.DeleteBShieldBlackIPResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.DeleteBShieldCustomerRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.DeleteBShieldCustomerResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.DeleteBShieldPolicyRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.DeleteBShieldPolicyResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdateBShieldBlackIPRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdateBShieldBlackIPResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdateBShieldCustomerRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdateBShieldCustomerResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdatePolicyIPToBlackIPRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdatePolicyIPToBlackIPResponseWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdateShieldPolicyRequestWrapper;
import com.baidu.dev2.api.sdk.shield.model.UpdateShieldPolicyResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ShieldService {
  private ApiClient apiClient;

  public ShieldService() {
    this(Configuration.getDefaultApiClient());
  }

  public ShieldService(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param addAccountExcludeIpRequestWrapper  (required)
   * @return AddAccountExcludeIpResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public AddAccountExcludeIpResponseWrapper addAccountExcludeIp(AddAccountExcludeIpRequestWrapper addAccountExcludeIpRequestWrapper) throws ApiException {
    Object localVarPostBody = addAccountExcludeIpRequestWrapper;
    
    // verify the required parameter 'addAccountExcludeIpRequestWrapper' is set
    if (addAccountExcludeIpRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'addAccountExcludeIpRequestWrapper' when calling addAccountExcludeIp");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldService/addAccountExcludeIp";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AddAccountExcludeIpResponseWrapper> localVarReturnType = new TypeReference<AddAccountExcludeIpResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param addBShieldPolicyRequestWrapper  (required)
   * @return AddBShieldPolicyResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public AddBShieldPolicyResponseWrapper addBShieldPolicy(AddBShieldPolicyRequestWrapper addBShieldPolicyRequestWrapper) throws ApiException {
    Object localVarPostBody = addBShieldPolicyRequestWrapper;
    
    // verify the required parameter 'addBShieldPolicyRequestWrapper' is set
    if (addBShieldPolicyRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'addBShieldPolicyRequestWrapper' when calling addBShieldPolicy");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldService/addBShieldPolicy";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AddBShieldPolicyResponseWrapper> localVarReturnType = new TypeReference<AddBShieldPolicyResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param delAccountExcludeIpRequestWrapper  (required)
   * @return DelAccountExcludeIpResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DelAccountExcludeIpResponseWrapper delAccountExcludeIp(DelAccountExcludeIpRequestWrapper delAccountExcludeIpRequestWrapper) throws ApiException {
    Object localVarPostBody = delAccountExcludeIpRequestWrapper;
    
    // verify the required parameter 'delAccountExcludeIpRequestWrapper' is set
    if (delAccountExcludeIpRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'delAccountExcludeIpRequestWrapper' when calling delAccountExcludeIp");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldService/delAccountExcludeIp";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DelAccountExcludeIpResponseWrapper> localVarReturnType = new TypeReference<DelAccountExcludeIpResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param deleteBShieldBlackIPRequestWrapper  (required)
   * @return DeleteBShieldBlackIPResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DeleteBShieldBlackIPResponseWrapper deleteBShieldBlackIP(DeleteBShieldBlackIPRequestWrapper deleteBShieldBlackIPRequestWrapper) throws ApiException {
    Object localVarPostBody = deleteBShieldBlackIPRequestWrapper;
    
    // verify the required parameter 'deleteBShieldBlackIPRequestWrapper' is set
    if (deleteBShieldBlackIPRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteBShieldBlackIPRequestWrapper' when calling deleteBShieldBlackIP");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldService/deleteBShieldBlackIP";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeleteBShieldBlackIPResponseWrapper> localVarReturnType = new TypeReference<DeleteBShieldBlackIPResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param deleteBShieldCustomerRequestWrapper  (required)
   * @return DeleteBShieldCustomerResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DeleteBShieldCustomerResponseWrapper deleteBShieldCustomer(DeleteBShieldCustomerRequestWrapper deleteBShieldCustomerRequestWrapper) throws ApiException {
    Object localVarPostBody = deleteBShieldCustomerRequestWrapper;
    
    // verify the required parameter 'deleteBShieldCustomerRequestWrapper' is set
    if (deleteBShieldCustomerRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteBShieldCustomerRequestWrapper' when calling deleteBShieldCustomer");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldService/deleteBShieldCustomer";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeleteBShieldCustomerResponseWrapper> localVarReturnType = new TypeReference<DeleteBShieldCustomerResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param deleteBShieldPolicyRequestWrapper  (required)
   * @return DeleteBShieldPolicyResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DeleteBShieldPolicyResponseWrapper deleteBShieldPolicy(DeleteBShieldPolicyRequestWrapper deleteBShieldPolicyRequestWrapper) throws ApiException {
    Object localVarPostBody = deleteBShieldPolicyRequestWrapper;
    
    // verify the required parameter 'deleteBShieldPolicyRequestWrapper' is set
    if (deleteBShieldPolicyRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteBShieldPolicyRequestWrapper' when calling deleteBShieldPolicy");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldService/deleteBShieldPolicy";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeleteBShieldPolicyResponseWrapper> localVarReturnType = new TypeReference<DeleteBShieldPolicyResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateBShieldBlackIPRequestWrapper  (required)
   * @return UpdateBShieldBlackIPResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateBShieldBlackIPResponseWrapper updateBShieldBlackIP(UpdateBShieldBlackIPRequestWrapper updateBShieldBlackIPRequestWrapper) throws ApiException {
    Object localVarPostBody = updateBShieldBlackIPRequestWrapper;
    
    // verify the required parameter 'updateBShieldBlackIPRequestWrapper' is set
    if (updateBShieldBlackIPRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateBShieldBlackIPRequestWrapper' when calling updateBShieldBlackIP");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldService/updateBShieldBlackIP";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateBShieldBlackIPResponseWrapper> localVarReturnType = new TypeReference<UpdateBShieldBlackIPResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateBShieldCustomerRequestWrapper  (required)
   * @return UpdateBShieldCustomerResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateBShieldCustomerResponseWrapper updateBShieldCustomer(UpdateBShieldCustomerRequestWrapper updateBShieldCustomerRequestWrapper) throws ApiException {
    Object localVarPostBody = updateBShieldCustomerRequestWrapper;
    
    // verify the required parameter 'updateBShieldCustomerRequestWrapper' is set
    if (updateBShieldCustomerRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateBShieldCustomerRequestWrapper' when calling updateBShieldCustomer");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldService/updateBShieldCustomer";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateBShieldCustomerResponseWrapper> localVarReturnType = new TypeReference<UpdateBShieldCustomerResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updatePolicyIPToBlackIPRequestWrapper  (required)
   * @return UpdatePolicyIPToBlackIPResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdatePolicyIPToBlackIPResponseWrapper updatePolicyIPToBlackIP(UpdatePolicyIPToBlackIPRequestWrapper updatePolicyIPToBlackIPRequestWrapper) throws ApiException {
    Object localVarPostBody = updatePolicyIPToBlackIPRequestWrapper;
    
    // verify the required parameter 'updatePolicyIPToBlackIPRequestWrapper' is set
    if (updatePolicyIPToBlackIPRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updatePolicyIPToBlackIPRequestWrapper' when calling updatePolicyIPToBlackIP");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldService/updatePolicyIPToBlackIP";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdatePolicyIPToBlackIPResponseWrapper> localVarReturnType = new TypeReference<UpdatePolicyIPToBlackIPResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateShieldPolicyRequestWrapper  (required)
   * @return UpdateShieldPolicyResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateShieldPolicyResponseWrapper updateShieldPolicy(UpdateShieldPolicyRequestWrapper updateShieldPolicyRequestWrapper) throws ApiException {
    Object localVarPostBody = updateShieldPolicyRequestWrapper;
    
    // verify the required parameter 'updateShieldPolicyRequestWrapper' is set
    if (updateShieldPolicyRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateShieldPolicyRequestWrapper' when calling updateShieldPolicy");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/ShieldService/updateShieldPolicy";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateShieldPolicyResponseWrapper> localVarReturnType = new TypeReference<UpdateShieldPolicyResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
