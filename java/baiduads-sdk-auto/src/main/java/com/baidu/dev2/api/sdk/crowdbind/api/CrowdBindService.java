/*
 * dev2 api schema
 * 'dev2.baidu.com' api schema
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.baidu.dev2.api.sdk.crowdbind.api;

import com.fasterxml.jackson.core.type.TypeReference;

import com.baidu.dev2.api.sdk.invoke.ApiException;
import com.baidu.dev2.api.sdk.invoke.ApiClient;
import com.baidu.dev2.api.sdk.invoke.Configuration;
import com.baidu.dev2.api.sdk.crowdbind.model.*;
import com.baidu.dev2.api.sdk.invoke.Pair;

import com.baidu.dev2.api.sdk.crowdbind.model.AddBindRequestWrapper;
import com.baidu.dev2.api.sdk.crowdbind.model.AddBindResponseWrapper;
import com.baidu.dev2.api.sdk.crowdbind.model.DeleteBindRequestWrapper;
import com.baidu.dev2.api.sdk.crowdbind.model.DeleteBindResponseWrapper;
import com.baidu.dev2.api.sdk.crowdbind.model.GetBindRequestWrapper;
import com.baidu.dev2.api.sdk.crowdbind.model.GetBindResponseWrapper;
import com.baidu.dev2.api.sdk.crowdbind.model.UpdateBindRequestWrapper;
import com.baidu.dev2.api.sdk.crowdbind.model.UpdateBindResponseWrapper;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class CrowdBindService {
  private ApiClient apiClient;

  public CrowdBindService() {
    this(Configuration.getDefaultApiClient());
  }

  public CrowdBindService(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * 
   * 
   * @param addBindRequestWrapper  (required)
   * @return AddBindResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public AddBindResponseWrapper addBind(AddBindRequestWrapper addBindRequestWrapper) throws ApiException {
    Object localVarPostBody = addBindRequestWrapper;
    
    // verify the required parameter 'addBindRequestWrapper' is set
    if (addBindRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'addBindRequestWrapper' when calling addBind");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/CrowdBindService/addBind";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<AddBindResponseWrapper> localVarReturnType = new TypeReference<AddBindResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param deleteBindRequestWrapper  (required)
   * @return DeleteBindResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public DeleteBindResponseWrapper deleteBind(DeleteBindRequestWrapper deleteBindRequestWrapper) throws ApiException {
    Object localVarPostBody = deleteBindRequestWrapper;
    
    // verify the required parameter 'deleteBindRequestWrapper' is set
    if (deleteBindRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'deleteBindRequestWrapper' when calling deleteBind");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/CrowdBindService/deleteBind";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<DeleteBindResponseWrapper> localVarReturnType = new TypeReference<DeleteBindResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param getBindRequestWrapper  (required)
   * @return GetBindResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public GetBindResponseWrapper getBind(GetBindRequestWrapper getBindRequestWrapper) throws ApiException {
    Object localVarPostBody = getBindRequestWrapper;
    
    // verify the required parameter 'getBindRequestWrapper' is set
    if (getBindRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'getBindRequestWrapper' when calling getBind");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/CrowdBindService/getBind";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetBindResponseWrapper> localVarReturnType = new TypeReference<GetBindResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * 
   * 
   * @param updateBindRequestWrapper  (required)
   * @return UpdateBindResponseWrapper
   * @throws ApiException if fails to make API call
   */
  public UpdateBindResponseWrapper updateBind(UpdateBindRequestWrapper updateBindRequestWrapper) throws ApiException {
    Object localVarPostBody = updateBindRequestWrapper;
    
    // verify the required parameter 'updateBindRequestWrapper' is set
    if (updateBindRequestWrapper == null) {
      throw new ApiException(400, "Missing the required parameter 'updateBindRequestWrapper' when calling updateBind");
    }
    
    // create path and map variables
    String localVarPath = "/json/sms/service/CrowdBindService/updateBind";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    
    
    
    final String[] localVarAccepts = {
      "application/json;charset=UTF-8"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json;charset=UTF-8"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UpdateBindResponseWrapper> localVarReturnType = new TypeReference<UpdateBindResponseWrapper>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
